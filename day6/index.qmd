---
format:
  revealjs:
    incremental: false
    css: ../styles.css
execute: 
  echo: true
---

# 第6回：データの結合、可視化（１）

<https://data-science-chiba-2024.github.io/day6/>

## クイズ

:::: {.columns}

::: {.column width="50%"}
![](../images/joho2024-qr-code.png)
:::

::: {.column width="50%"}
**注意：** 質問は複数選択です。**すべて**の正しい答えを選んでください。

クイズの際は質問に回答してください。他の行為（スライドを閲覧することやRStudioの操作など）は**禁止**です。
:::

::::

# データの結合

## データの結合

- 多くの場合、使いたいデータが複数のデータセット（データフレーム、あるいはファイル）に跨いでいる

- したがって、**データの結合**（join）を行う必要がある

- 今回は飛行のデータを使ってデータの結合を学びます

## プロジェクトの準備

- 新しいデータセットを解析しますので、新しいプロジェクトを作りましょう。

- `flights_analysis`というプロジェクトを作って、デスクトップにおいてください。

## パッケージの準備

- プロジェクトの中に`flights.R`という新しいスクリプトを作って、コードを書きます：

```{r}
#| filename: flights.R
library(nycflights13)
library(tidyverse)
```

## `nycflights13`パッケージについて

:::: {.columns}

::: {.column width="50%"}
- このパッケージには複数の練習用のデータセットが入っています。

- `flights`という2013年にデータフレームにはニューヨーク市を出発した飛行データが入っています
:::

::: {.column width="50%"}
![](https://cdn.images.express.co.uk/img/dynamic/25/590x/JetBlue-flights-1440362.webp?r=1621865971540)
:::

::::

::: {.aside}
<https://www.express.co.uk/travel/articles/1440362/us-holidays-jetblue-flights-travel-low-cost-budget-heathrow-gatwick>
:::

## 複数のデータセットの例：飛行のデータ

- `flights`を打つと、飛行データが見えます：

```{r}
#| class: small
#| attr-output: "style='font-size: 0.8em'"
flights
```

---

- でも、データが多いため、今回の授業に使う列を選んで、`flights2`として保存しましょう：

::: {.medsmall}

```{r}
flights2 <- flights |>
  select(year, time_hour, origin, dest, tailnum, carrier)

flights2
```

:::

## 複数のデータセットの例：航空会社のデータ

- `airlines`には航空会社の名前のデータが入っています。
  - `carrier`は航空会社コードのこと（二文字）。例えば、全日空の航空会社コードは`NH`。

---

```{r}
airlines
```

## 飛行データと航空データの結合

どうやって飛行データに航空会社の名前を結合させることができるのでしょうか？

## チャレンジ ①

まずは、列を確認しましょう。

**二つのデータフレームの間に共通している列名はどれでしょうか？**

---

この列名**を元に**データの結合を行います。

## `left_join()`で別のデータフレームからデータを加える

- データの結合をする関数は`left_join()`です。
  - **左**の方のデータに新しいデートを**結合**させる、という意味です

---

航空会社の名前を追加しましょう：

```{r}
#| attr-output: "style='font-size: 0.3em'"
flights2 |>
  left_join(airlines)
```

## 結合する時は「鍵」が大事

上のコードを実行した際、このメッセージがありました：

```
Joining with `by = join_by(carrier)`
```

- つまり、それぞれのデータフレームが**共通に持っている列**を元に結合しました。これ列を**「鍵」（Key）**と呼ぶ。

- 共通に持っている列がないと、**結合ができません**。

## 結合する時は「鍵」が大事

上のコードは自動的に共通する列を鍵として使ったけど、手動で指定することもできます：

---

```{r}
#| attr-output: "style='font-size: 0.3em'"
flights2 |>
  left_join(
    airlines,
    by = join_by(carrier))
```

## 鍵となる列の条件

- 右側のデータの鍵が行を**識別できる**必要があります。つまり、それぞれの`carrier`はデータに一回だけ出現する、ということです。

- `count()`で確かめることができます。

---

```{r}
airlines |>
  count(carrier)
```

---

`n`が全て`1`になっていることを確認したいわけです。

それは`filter()`でできます：

```{r}
airlines |>
  count(carrier) |>
  filter(n > 1)
```

`n`が全て`1`なので、航空会社コードは全て、それぞれ１回だけ出ていることが分かりました。

## 他のデータに結合してみる

`nycflights13`パッケージに他のデータフレームがいくつかある：

![](https://r4ds.hadley.nz/diagrams/relational.png)

## チャレンジ ②：他のデータに結合してみる

飛行機のデータが入っている`planes`のデータフレームを`flights2`に結合することができますか？

# データの可視化

## データの可視化について

- EDA（**E**xploratory **D**ata **A**nalysis）の際、データの**可視化**が重要なツールになる

- 本授業では`ggplot2`というパッケージを使います
  - Rに備え付けの`plot()`関数もありますが、使い方はちょっと難しい（統一性が少ない）ので、使いません。

---

![Image by Allison Horst](../images/ggplot2_exploratory.png)

## ggplot2について

- `gg` = "**G**rammar of **G**raphics"（**画像**の**文法**）
  - 「文法」が分かれば、（ほとんど）<br>どんな図でも作れる

（前に`ggplot`というパッケージもありましたが、`ggplot2`は新しいバージョン）

## ggplot2について

図の構造にはいくつか**決まった要素**がある

- **geometry**: 図はどのような**形**にする？

- **aesthetics**: データをどのように図に**表す**？

## Geometry（形）

:::: {.columns}

::: {.column width="50%"}
円グラフ
<br><br>
<img src="https://clauswilke.com/dataviz/proportional_ink_files/figure-html/RI-pop-pie-1.png" alt="drawing" height="220">
:::

::: {.column width="50%"}
ボーグラフ
<br><br>
<img src="https://clauswilke.com/dataviz/proportional_ink_files/figure-html/RI-pop-bars-1.png" alt="drawing" height="220">
:::

::::

:::: {.aside}
::: {.small}
https://clauswilke.com/dataviz/proportional-ink.html
:::
::::

## Aesthetics（データの表し方）

<img src="https://clauswilke.com/dataviz/aesthetic_mapping_files/figure-html/common-aesthetics-1.png" alt="drawing" height="250">

:::: {.aside}
::: {.small}
https://clauswilke.com/dataviz/aesthetic-mapping.html
:::
::::

## 図の文法

::: {.columns}
::: {.column width="60%"}
- Geometry（形）：点グラフ
- Aesthetics（データの表し方）
  - `year`（年）: 横軸の位置（`x`）
  - `pop`（人口、万人単位）: 縦軸の位置（`y`）
  - `life_exp`（寿命）：点のサイズ
:::
::: {.column  width="40%"}
```{r}
#| echo: false
library(tidyverse)
library(janitor)
gapminder_raw <- read_csv(here::here("data/gapminder_data.csv"))
gapminder <- clean_names(gapminder_raw)

gapminder |>
  filter(country == "Japan") |>
  mutate(pop = pop/10000) |>
  ggplot(aes(x = year, y = pop, size = life_exp)) +
    geom_point() +
  theme_gray(base_size = 16)
```

:::
::: 

## プロジェクトの準備

- 新しいデータセットを解析しますので、新しいプロジェクトを作りましょう。

- `penguins_analysis`というプロジェクトを作って、デスクトップにおいてください。

## パッケージの準備

- プロジェクトの中に`penguins.R`という新しいスクリプトを作って、コードを書きます：

---

::: {.medsmall}

```{r}
#| filename: penguins.R
#| attr-output: "style='font-size: 0.4em'"
library(tidyverse)
library(palmerpenguins)

penguins
```

:::

---

![](https://allisonhorst.github.io/palmerpenguins/reference/figures/lter_penguins.png)

## palmerpenguinsについて

![](https://allisonhorst.github.io/palmerpenguins/reference/figures/culmen_depth.png)

## 目的：このグラフを作る

![](https://r4ds.hadley.nz/data-visualize_files/figure-html/unnamed-chunk-7-1.png)

## `ggplot()`でグラフの基盤を作る

::: {.medium}
```{r}
#| output-location: column
ggplot(data = penguins)
```
:::

## `mapping()`で座標を指定する

::: {.medium}
```{r}
#| output-location: column
ggplot(
  data = penguins,
  mapping = aes(
    x = flipper_length_mm,
    y = body_mass_g
  )
)
```
:::

## `mapping()`で座標を指定する

::: {.medium}
```{r}
#| output-location: column
#| code-line-numbers: "3-6"
ggplot(
  data = penguins,
  mapping = aes(
    x = flipper_length_mm,
    y = body_mass_g
  )
)
```
:::

## `geom_()`でデータの形を指定する

::: {.medium}
```{r}
#| output-location: column
ggplot(
  data = penguins,
  mapping = aes(
    x = flipper_length_mm,
    y = body_mass_g
  )
) +
  geom_point()
```
:::

## `geom_()`でデータの形を指定する

::: {.medium}
```{r}
#| output-location: column
#| code-line-numbers: "7-8"
ggplot(
  data = penguins,
  mapping = aes(
    x = flipper_length_mm,
    y = body_mass_g
  )
) +
  geom_point()
```
:::

## チャレンジ ③

`bill_length_mm`を横軸、`bill_depth_mm`を縦軸にして、点グラフを作成して下さい

## `color`で色を潰す

::: {.medium}
```{r}
#| output-location: column
ggplot(
  data = penguins,
  mapping = aes(
    x = flipper_length_mm,
    y = body_mass_g,
    color = species
  )
) +
  geom_point()
```
:::

## `color`で色を潰す

::: {.medium}
```{r}
#| output-location: column
#| code-line-numbers: "6"
ggplot(
  data = penguins,
  mapping = aes(
    x = flipper_length_mm,
    y = body_mass_g,
    color = species
  )
) +
  geom_point()
```
:::

## チャレンジ ④

色で島（`island`）を表てください

## チャレンジ ⑤

色で種（`species`、形で島（`island`）を表てください
