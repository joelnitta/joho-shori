---
format:
  revealjs:
    incremental: false
    css: ../styles.css
execute: 
  echo: true
---

# 第5回：データの整理（2）

<https://joelnitta.github.io/joho-shori/day5/>

## クイズ

## おさらい

- 前回は以下のデータ処理に必要な関数を学びました：
  - `rename()`で列の名前を変更する
  - `mutate()`で列の中身を変える
  - `arrange()`で行を並び替える
  - `filter()`で行を絞り込む

## 準備

- 前回欠席した方は、[Moodle](<https://moodle.gs.chiba-u.jp/moodle/mod/resource/view.php?id=1295207>)から第5回の`students_analysis.zip`をダウンロードして、デスクトップで解凍してください。
  - 後ほどMoodleから別のファイルをダウンロードする必要があるため、**今のうちに全員Moodleにログインしてください**

- デスクトップにある`students_analysis`フォルダー内の`students_analysis.Rproj`をダブルクリックして、プロジェクトを開いてください。

---

![](../images/download-project-1.png)

---

![](../images/download-project-2_annotated.png)

---

![](../images/download-project-3_annotated.png)

---

![](../images/download-project-5_annotated.png)

---

![](../images/download-project-6.png)

---

![](../images/download-project-7_annotated.png)

---

- `students.R`のコードを実行してデータを読み込み、整理してください。

::: {.medsmall}

```{r}
#| filename: students.R
#| eval: false
library(tidyverse)
library(janitor)

# Load raw data
students_raw <- read_csv("data/students.csv")

# Rename columns
students_renamed <- clean_names(students_raw)

# Convert age to numeric
students <- mutate(students_renamed, age = parse_number(age))
```

```{r}
#| echo: false
library(tidyverse)
library(janitor)

# Load raw data
students_raw <- read_csv("../data/students.csv")

# Rename columns
students_renamed <- clean_names(students_raw)

# Convert age to numeric
students <- mutate(students_renamed, age = parse_number(age))
```

:::

## チャレンジ ①

早速チャレンジに取り組みましょう。

`students`から食事プランが`"Lunch only"`の学生を抽出し、名前をZからAの順に並べ替えてください。

## パイプについて

- チャレンジ①では、まず条件で絞り込んだデータを一時保存してから、次のステップ（列の並び替え）を行いました。

```{r}
#| attr-output: "style='font-size: 0.3em'"
#| eval: false
#| include: false
students_lunch <- filter(students, meal_plan == "Lunch only")
arrange(students_lunch, desc(full_name))
``` 

## パイプについて

- この方法でも解析が短い場合は問題ありませんが、長くなると**大変です**。

- **パイプ**を使うとこの問題を解決できます。

## パイプの使い方

- まず、パイプ（`|>`）の基本的な使い方を覚えましょう。
  - 以前は`%>%`と書いていましたが、最近のRでは`|>`が使われます。

- 例えば、`arrange(データ, 列名)`のように書いてきましたが、パイプを使うと次のように書けます：

`データ |> arrange(列名)`

---

- つまり、`|>`は**左側のものを右側へ渡す**機能があります。

試してみましょう。

```{r}
#| attr-output: "style='font-size: 0.3em'"
students |> arrange(meal_plan)
``` 

---

- 繰り返しになりますが、

`students |> arrange(meal_plan)`

と

`arrange(students, meal_plan)`

は**同じ意味**です。

---

- パイプの便利な点は、**途中結果を保存せず**に解析のステップを次々と進められるところです。

::: {.medsmall}

```{r}
students |> filter(meal_plan == "Lunch only") |> arrange(full_name)
``` 

:::

---

- Rは改行があっても構いませんので、改行を入れるとさらに読みやすくなります。

```{r}
#| attr-output: "style='font-size: 0.3em'"
students |>
  filter(meal_plan == "Lunch only") |>
  arrange(full_name)
``` 

---

```{r}
#| eval: false
students |>
  filter(meal_plan == "Lunch only") |>
  arrange(full_name)
``` 

`|>`を見たら、「それから」と読むと理解しやすいです：

*`students`から始めて、**それから**食事プランが"Lunch only"の学生に絞り込んで、**それから**学生の名前順に並び替える*

---

- 今後は基本的にパイプを使ってコードを書きます。
  - 最初は慣れないかもしれませんが、すぐに馴染むでしょう。

## チャレンジ ②

パイプを使って`students`から`student_id`が2より大きい行だけに絞り、`favourite_food`の順で並び替えてください。

## 欠測データについて

- `age`には`NA`という値が含まれています。

- `NA`は「Not Applicable」（「該当しない」）を意味します。
  - この値は、データが該当しないか、または欠損していることを示します。
  - `age`の場合、何らかの理由でその人の年齢がわからないことを意味します。
  - （一部はうまく数字に変換できなかったためですが、もう一つは元々そうなっていました）

## 欠測データを省く方法

- データフレームに欠測データが含まれていると、エラーの原因になることが多いです。
  - 解析を行う前にそれらを除外する必要があります。
  - `is.na()`関数は、その値が`NA`であるかを確認してくれます。

- 例えば：

```{r}
is.na(c(1, 2, NA, 3))
```

---

使ってみましょう。

```{r}
#| attr-output: "style='font-size: 0.3em'"
students |>
  filter(is.na(age))
```

あら、これはまずいですね。欠測データ**だけ**が抽出されてしまいました。

私たちが欲しいのは、その**逆**です。

---

- `!`は論理ベクトルを**反転**させます。
  - つまり、`TRUE`を`FALSE`に、`FALSE`を`TRUE`にします。「否」と読むと理解しやすいです。

```{r}
!is.na(c(1, 2, NA, 3))
```

---

- `!`を使って、`NA`**ではない**データだけに絞り込みましょう。

```{r}
#| attr-output: "style='font-size: 0.3em'"
students |>
  filter(!is.na(age))
```

## チャレンジ ③

`students`から`age`が`NA`になっている行を除外してから、`favorite_food`の順で並び替えてください。（パイプを使ってください）

## 列を選ぶ

- 特にデータが大きい場合、解析に不要な列があることがあります。

- 必要な列だけに絞ることで、解析がやりやすくなります。

---

- 列を選ぶ関数は`select()`です。例えば、`student_id`、`full_name`、`meal_plan`を選択します：

```{r}
#| attr-output: "style='font-size: 0.3em'"
students |>
  select(student_id, full_name, meal_plan)
```

## 列や行を扱う関数

- 前回は以下のデータ処理に使用する関数を学びました：
  - `rename()`で列の名前を変更する
  - `mutate()`で列の内容を変更する
  - `select()`で列を選択する
  - `arrange()`で行を並び替える
  - `filter()`で行を絞り込む

## 新しいプロジェクト：`gapminder`

- これから学ぶ関数はもっと大きなデータで使用するため、**新しいプロジェクト**を作成します。

- このプロジェクトでは`gapminder`というデータセットを使用します。1952年から2007年までの各国の経済データが含まれています（第4回の課題でも使用しました）。

## `gapminder`プロジェクトの作成

1. デスクトップに`gapminder_analysis`というプロジェクトを作成し、そのプロジェクトを開いてください。
  - プロジェクトの作成方法については、[第3回のスライド](https://joelnitta.github.io/joho-shori/day3/#/%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9)を参照してください。

## `gapminder`プロジェクトの作成

2. データをMoodleからダウンロードし、`gapminder_analysis`の中に保存してください：

<https://moodle.gs.chiba-u.jp/moodle/mod/resource/view.php?id=1295476>

## `gapminder`プロジェクトの作成

3. 新しいプロジェクト内に`gapminder.R`というRファイルを作成し、`gapminder`というデータセットを読み込むコードを書きます：

::: {.medsmall}

```{r}
#| filename: gapminder.R
#| eval: false
library(tidyverse)
library(janitor)

# Load raw data
gapminder_raw <- read_csv("gapminder.csv")

# Fix column names
gapminder <- clean_names(gapminder_raw)
```

```{r}
#| echo: false
library(tidyverse)
library(janitor)
gapminder_raw <- read_csv(here::here("data/gapminder_data.csv"))
gapminder <- clean_names(gapminder_raw)
```

:::

## データの集計

- 今まで学んだ関数はデータフレームの値を個別に扱いました（主に**列**か**行**に対する処理を行ってきました）。

- しかし、データフレームに含まれる値の**平均や合計を計算したい場合**には、さらに操作が必要です。

## データの合計を`count()`で数える

- データの全体像を掴むために、まず数を数えることは有効です。

- 例えば、`gapminder`にいくつの国が含まれているかを数えます。
  - **注意**：`count()`のような集計関数の結果は、入力のデータと大きく異なります！

---

```{r}
gapminder |> count(country)
```

## データの平均などを計算するために`summarize()`を使う

- `summarize()`（「集計する」）の使い方は`mutate()`と似ています。

- `summarize(データ, 新しい列名 = コマンド)`
  - コマンドには、新しい列の生成方法を指定します
  - 新しい列名の設定は**任意**であり、わかりやすい名前を指定します。

---

- 例えば、全体の寿命の平均を計算しましょう：

```{r}
gapminder |>
  summarize(mean_life_exp = mean(life_exp))
```

- `mean()`は平均を計算する関数です。

---

- また、最も短い寿命を求めます：

```{r}
gapminder |>
  summarize(min_life_exp = min(life_exp))
```

- `min()`は最小値を返す関数です。

## `summarize()`によく使う計算のコマンド

集計をする際、以下の関数を覚えておくと便利です：

- `max()`：最大値を計算する
- `min()`：最小値を計算する
- `mean()`：平均値を計算する
- `sd()`：標準偏差を計算する
- `n()`：それぞれのグループごとのデータの数（行数）を数える

## グループ化

- しかし、**全体の**平均や最小値だけでは役立ちません。

- 代わりに、**国ごと**の値が知りたい場合があります。

- そのように「何か**ごと**」に計算するには、**グループ化**を使用します。

---

- グループを指定する関数は`group_by()`です：

```{r}
#| attr-output: "style='font-size: 0.3em'"
gapminder |>
  group_by(country)
```

これで国ごとのグループが作成されました

---

![](../images/groups_annotated.png)

---

- ただし、グループ化だけではまだ計算が行われていません。

- グループ化の次に`summarize()`を用いて計算します：

---

::: {.medsmall}

```{r}
gapminder |>
  group_by(country) |>
  summarize(
    mean_life_exp = mean(life_exp)
  )
```

:::

## チャレンジ ④

- 国ごとに寿命の最小値を求めてください。

## グループ化

- 同時に複数の計算も可能です。
  - 各新しい列をカンマで区切ります

- 例えば、平均と標準偏差：

---

::: {.medsmall}

```{r}
#| eval: false
gapminder |>
  group_by(country) |>
  summarize(
    mean_life_exp = mean(life_exp),
    sd_life_exp = sd(life_exp)
  )
```

```{r}
#| echo: false
gapminder |>
  group_by(country) |>
  summarize(
    mean_life_exp = mean(life_exp),
    sd_life_exp = sd(life_exp)
  ) |>
  print(n = 6)
```

:::

- `sd()`（「standard deviation」）は標準偏差を計算する関数です。

## チャレンジ ⑤

- 国ごとの一人当たり総生産の平均と標準偏差を計算してください。

## パイプライン

- パイプとコマンドを組み合わせることで、複雑なデータ処理を簡単に行うことができます。

- 例えば、アジアの国だけに絞ってから、国ごとの計算も可能です：

---

::: {.medsmall}

```{r}
gapminder |>
  filter(continent == "Asia") |>
  group_by(country) |>
  summarize(
    mean_life_exp = mean(life_exp),
    sd_life_exp = sd(life_exp)
  )
```

:::

## まとめ

- グループ化により、グループごとの集計が可能です。
  - `group_by`でグループを定義
  - `summarize()`でグループごとの計算を実行

- パイプ（`|>`）で複数のデータ処理操作をつなぐことで、複雑なデータ処理パイプラインが構築できます。