---
format:
  revealjs:
    incremental: false
    css: ../styles.css
execute: 
  echo: true
---

# 第２回：R入門（２）

<https://data-science-chiba-2024.github.io/day2/>

## クイズ

:::: {.columns}

::: {.column width="50%"}
![](../images/joho2024-qr-code.png)
:::

::: {.column width="50%"}
**注意：**質問は複数選択です。**すべて**の正しい答えを選択してください。
:::

::::

あるいは、[gosocrative.com](https://gosocrative.com) で joho2024を入力

## アウトライン

- **R入門（２）**: Rの基本的な要素を学ぶ
  - ベクトル
  - データ型
  - 関数
  - パッケージ

## コメントについて

<!-- FIXME: remove this section after lecture -->

- `#`の後に書いた文は「コメント」です
- Rはコメントを無視するので、何を書いてもエラーになりません
- 自分用のメモとして使う
  - 日本語で書いても大丈夫

```{r}
# これはコメントです
# 3 % 9
3 * 9
```

## 宿題のした線について

宿題にこのようなところがあります：

```{r}
#| eval: false 

# 計算
y <- ____
# 計算結果の確認
y
```

- `____`を**消してから**、コードを書いてください
  - 下線が残っているとエラーになってしまいます

## ベクトルについて

- 今までは、数を一つずつ扱ってきた（`4 + 5` など）
- しかし、Rでは一気に複数の数を扱うことができます
- 例えば、1から10までの数：

```{r}
1:10
```

- このようなデータの集まりを**「ベクトル」**と呼びます
  - ベクトル：一連のデータの集まり

## ベクトルについて

- `1`から`10`までの数をオブジェクトに保存すれば、今度はそれを使って様々な計算ができます
- 例えば、一気に全ての値を2で割る：

```{r}
x <- 1:10

x / 2
```

## ベクトルについて

- もう一つのベクトルの作り方があります：`c`
  - `c` は **combine**（結合する）という意味

```{r}
c(1, 2, 3)
```

## チャレンジ

- `40`から`50`までのベクトルを作る

- `40`, `42`, `46` を含むベクトルを作る

## データ型について

- 今までは数（数字）しか扱ってきませんでしたが、Rには他のデータの種類もあります
  - **データ型**と呼びます

. . .

- 文字データ：

```{r}
menu <- c("ramen", "edamame", "gyoza")
menu
```

- 文字は必ず `"` で囲まないといけません

## データ型について

- 論理データ：

```{r}
coin_flip <- c(TRUE, FALSE, TRUE)
coin_flip
```

- 論理データは `TRUE` または `FALSE` しかありません。また、 `"` を使いません。

---

- 論理データは値の比較によく使います：

```{r}
ages <- c(19, 40, 21)

ages > 20
```

## データ型について

- あるベクトルには一つのデータ型しか持てません。
  - 異なるデータ型を結合すると、強制的に同じになります。

```{r}
c("ramen", "gyoza", 10, 11)
```

- `"` は文字を表します。つまり、Rにとって `"10"` は数ではなく、文字です。

## データ型について

- データ型を確認したい時には `typeof()` を使います

```{r}
menu
typeof(menu)
```

---

```{r}
coin_flip
typeof(coin_flip)
```

---

```{r}
ages
typeof(ages)
```

- Rでは、"double" は「数値」という意味を持っています。

---

この授業で扱う主なRのデータ型：

- 文字（character）
- 論理（logical）
- 数字（numeric, "double"）

## データ型が大事な理由

- データ型が一致していないと、エラーになってしまうことがあります。

```{r}
#| error: true
10 + "20"
```

- 特に外部からデータを読み込んだ際、予想と違ったデータ型になってしまうことがあります。

## チャレンジ

以下のコードを実行すると、結果のデータ型はどれでしょうか？

```{r, eval = FALSE}
c(19, 21, 40, TRUE, TRUE, FALSE)
```

<br>

```{r, eval = FALSE}
c(menu, ages)
```

## 関数とは

何かの値（インプット）を受けて、処理し、計算結果（アウトプット）を返すもの

::: center-x

<img src="https://manamina.valuesccg.com/uploads/content/image/12292/__.png" alt="drawing" height="100">

::: small
<https://manamina.valuesccg.com/articles/756>
:::

:::

## 関数とは

関数の書き方：

- `関数名(入力)`
  - 必ず関数名を書いた後に、入力を括弧の中に書きます

例えば、`sum()` は数の合計を計算する関数です：

```{r}
ages
sum(ages)
```

## 関数とは

- `round()` は少数を四捨五入する関数です：

```{r}
pi
round(pi)
```

- （Rには `pi` 𝜋 が元々含まれています）

## ヘルプファイル

関数の使い方を確認したい時は `?関数名` と入力して、ヘルプファイルを参照します

```{r}
#| eval: false
?round
```

## 引数について

- ヘルプファイルの中に、こう書いてあります：

```{r}
#| eval: false
round(x, digits = 0, ...)
```

- `x` と `digits` は **引数** の名前です
  - 引数とは、関数の **入力や設定** のことです
    - `x`: 四捨五入する数値
    - `digits`: 残す小数の桁数の指定
  - 引数が複数ある場合は、必ず `,` で区切ります
  - (`...` は上級な話なので、この授業では扱いません)

## 引数について

つまり、さっきは

```{r}
#| eval: false
round(pi)
```

と書きましたが、

```{r}
round(x = pi)
```

とでも書けるわけです。

## 引数について

- ヘルプファイルでは、`digits = 0` と書いてあります
  - これは、デフォルトの設定では残す小数の桁数はゼロ、という意味です

```{r}
round(x = pi, digits = 0)
```

---

- 異なる数を設定することもできます：

```{r}
round(x = pi, digits = 2)
```

---

- しかし、`x` のデフォルト設定がないので、`x` を指定しないとエラーになってしまいます：

```{r}
#| error: true
round(digits = 2)
```

- つまり、`round()` にとって、`x` は必須です
  - `digits` は任意です

---

- Rは引数を **名前** からでも、 **位置** からでも認識できます

- `round()` の最初の引数が `x`、その次が `digits` なので、このようにも書けます：

```{r}
round(pi, 2)
```

---

- あるいは、名前を使えば、位置を変えることができます：

```{r}
round(digits = 2, x = pi)
```

---

- おすすめは、**任意の引数名を使う**ことです：

```{r}
round(pi, digits = 2)
```

## チャレンジ

- `sort()` は入力を並び替える関数です。
  - 引数は `x`（ベクトル）と `decreasing`（論理）

今まで扱ったデータを以下のように並び替えてください：

1. `ages` を小さい順から大きい順に
2. `ages` を大きい順から小さい順に
3. `menu` をAからZまでの順に
4. `menu` をZからAまでの順に

## パッケージとは

- Rパッケージとは、Rができることを大幅に増やす「追加」のソフト（関数のまとまり）です
  - 現在、**2万**近くのパッケージがあります！

## パッケージのインストール

Rパッケージのインストールを行うには、`install.packages()` を使います：

```{r}
#| label: install
#| echo: true
#| eval: false
install.packages("ggplot2")
```

## パッケージのインストール

- 一度インストールしたら、次回からはインストールする必要はありません\*

- パッケージをアップデートしたい時に再インストールすれば良い

- パッケージのインストールしただけでは、まだ使える状態になっていません

## パッケージのロード

- パッケージをインストールしたら、使える状態にするためにロードする必要があります

`library()` 関数でロードします：

```{r}
library(ggplot2)
```

## `install.packages()`と`library()`の違い

- `install.packages()` は一度だけで良いです（パソコンにパッケージをダウンロードします）\*
- `library()` はRを使うたびに実行する必要があります（パッケージを現在のRセッションで使用可能にします）

- `install.packages()` はパッケージ名を引用符で囲む
- `library` はパッケージ名を引用符で囲まない

## チャレンジ

- `emoji`というパッケージをインストールしてから、ロードしてください
- `emoji("smile")`というコマンドを実行してください

## tidyverse

- `tidyverse` はデータサイエンス用パッケージの集まりです
  - `ggplot2`（可視化）
  - `dplyr`（データの整理）
  - `stringr`（文字データを扱う）
  - など

これからよく使うので、インストールとロードをしましょう。

---

```{r}
#| label: install-tidyverse
#| echo: true
#| eval: false
install.packages("tidyverse")
library(tidyverse)
```

（実は、`tidyverse` は教室のパソコンに既にインストールされているのでインストールは不要ですが、自分のパソコンを使用している場合は必要です）

## 情報処理演習室の注意点

> `install.packages()` は一度だけで良い

と説明しましたが、この教室のパソコンからログアウトすると**パッケージを含む**あなたのデータ**が全て消去されてしまいます**。

そのため、この教室のパソコンに新しくインストールするパッケージは**毎回インストールが必要**です。

<!-- 

## 今後の宿題について

- 宿題は今まで通りオンラインで受けることも可能です
  - 混雑している時間帯には接続できない可能性があります
  - しばらく使用しないとリセットされてしまいます

## 今後の宿題について

- 実は、オンラインで受けてきた宿題は**Rパッケージ**「 `joholearnr`」でもあります

- 教室内のパソコンに宿題がインストールされまたので、**ここで**受けることも可能になりました：
  - 右上の「環境」パネルに新しい「Tutorial」タブをクリック(1)
  - 受けたい宿題を探します（2）
  - 「Start Tutorial」をクリックするとブラウザ内でチュートリアルが始まります（3）

---

![](../images/tutorial-rstudio-screenshot.png)

---

- リストに今週の宿題が入っていない場合は、パッケージのアップデート（再インストール）が必要です。
  - このようにインストールを行なってください：

```{r}
#| label: install-joholearnr-2
#| echo: true
#| eval: false
library(remotes)
install_github("joelnitta/joholearnr")
```

- `install_github()`は、カスタムなRパッケージをインストールする関数です

-->

## 連絡事項

- 来週（10月15日）は休みです

- 次回は10月22日です