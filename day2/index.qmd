---
format:
  revealjs:
    incremental: false
    css: ../styles.css
execute: 
  echo: true
---

# 第２回：R入門（２）

<https://data-science-chiba-2024.github.io/day2/>

## スケジュール {.smaller}

1. ガイダンス、RとRStudioの紹介、R入門（１）
2. **R入門（２）**
3. プロジェクトの整理とデータの読み込み
4. データの整理（１）
5. データの整理（２）
6. データの可視化（１）
7. データの可視化（２）
8. オンデマンド講義とe-learning

## クイズ

![](../images/joho2024-qr-code.png)

あるいは、[gosocrative.com](https://gosocrative.com) で joho2024を入力

## コメントについて

<!-- FIXME: remove this section after lecture -->

- `#`の後に書いた文は「コメント」です

- Rはコメントを無視するので、何を書いてもエラーになりません

- 自分用のメモとして使う
  - 日本語で書いても大丈夫

```{r}
# これはコメントです
# 3 % 9
3 * 9
```

## ベクトルについて

- 今までは、数を一個ずつ扱ってきた（`4 + 5`など）

- でも、R では一気に複数の数を扱うことができる

- 例えば、1 から 10 までの数：

```{r}
1:10
```

- このようなデータの集まりを**「ベクトル」**と呼ぶ

## ベクトルについて

- 1 から 10 までの数をオブジェクトに保存すれば、今度はそれを使って様々な計算ができる。

- 例えば、一気に全部の値を２で割る：

```{r}
x <- 1:10

x / 2
```

## ベクトルについて

- もう一つのベクトルの作り方がある：`c`
  - `c`は **combine**（結合する）という意味

```{r}
c(1, 2, 3)
```

## チャレンジ

- `40`から`50`までのベクトルを作る

- `40`, `42`, `46`を含むベクトルを作る

## データ型について

- 今までは数（数字）しか扱ってこなかったが、R には他のデータの種類もある
  - **データ型**と呼ぶ

- 文字データ:

```{r}
menu <- c("ramen", "edamame", "gyoza")
menu
```

- 文字は必ず`"`で囲まないといけない

## データ型について

- 論理データ：

```{r}
coin_flip <- c(TRUE, FALSE, TRUE)
coin_flip
```

- 論理データは`TRUE`または`FALSE`しかない。また、`"`を使わない。

---

- 論理データは値の比較によく使う：

```{r}
ages <- c(19, 40, 21)

ages > 20
```

## データ型について

- あるベクトルには一つのデータ型しか持てない。
  - 異なるデータ型を結合すると、強制的に同じになる。

```{r}
c("ramen", "gyoza", 10, 11)
```

- `"`は文字を表す。つまり、R にとって`"10"`は数ではなく、文字です。

## データ型について

- データ型を確認したい時には`typeof()`を使う

```{r}
menu
typeof(menu)
```

---

```{r}
coin_flip
typeof(coin_flip)
```

---

```{r}
ages
typeof(ages)
```

- R では、"double"は「数字」という意味を持っている。

---

この授業で扱う主なRのデータ型：

- 文字（character）
- 論理（logical）
- 数字（numeric, "double"）

## データ型が大事な理由

- データ型が一致していないと、エラーになってしまうことがある。

```{r}
#| error: true
10 + "20"
```

- 特に外からデータを読み込んだ際、予想と違ったデータ型になってしまうことがある。

## チャレンジ

以下のコードを実行すると、結果のデータ型はどれでしょうか？

```{r, eval = FALSE}
c(19, 21, 40, TRUE, TRUE, FALSE)
```

```{r, eval = FALSE}
c(menu, ages)
```

## 関数とは

何かの値（インプット）を受けて、処理して、計算結果（アウトプット）を返すもの

::: center-x

<img src="https://manamina.valuesccg.com/uploads/content/image/12292/__.png" alt="drawing" height="100">

::: small
<https://manamina.valuesccg.com/articles/756>
:::

:::

## 関数とは

関数の書き方：

- `関数名(入力)`
  - 必ず関数名を書いた後に、入力を括弧の中で書く

例えば、`sum()`は数の合計を計算する関数：

```{r}
ages
sum(ages)
```

## 関数とは

- `round()`は少数を切り捨てる関数：

```{r}
pi
round(pi)
```

- （R にはpiが元々入っています）

## ヘルプファイル

関数の使い方を確認したい時は`?関数名`と打って、ヘルプファイルを参照すれば良い

```{r}
#| eval: false
?round
```

## 引数について

- ヘルプファイルの中に、こう書いてある：

```{r}
#| eval: false
round(x, digits = 0, ...)
```

- `x`と`digits`は**引数**の名前
  - 引数とは、関数の**入力や設定**のこと
    - `x`: 切り捨てる数字
    - `digits`: 残す少数の数の指定
  - 引数が複数ある場合は、必ず`,`で区切る
  - (`...`は上級な話なので、この授業では扱いません)

## 引数について

つまり、さっきは

```{r}
#| eval: false
round(pi)
```

と書きましたが、

```{r}
round(x = pi)
```

とでも書けるわけです。

## 引数について

- ヘルプファイルでは、`digits = 0`と書いてある
  - これは、デフォルトの設定では残す少数の数はゼロ、という意味

```{r}
round(x = pi, digits = 0)
```

---

- 違う数を設定することもできます：

```{r}
round(x = pi, digits = 2)
```

---

- でも、`x`のデフォルト設定がないので、`x`を指定しないとエラーになってしまう：

```{r}
#| error: true
round(digits = 2)
```

- つまり、`round()`にとって、`x`は必須である
  - `digits`は任意です

---

- R は引数を**名前**からでも、**位置**からでも認識できる。

- `round()`の最初の引数が`x`、その次が`digits`なので、このようにも書ける：

```{r}
round(pi, 2)
```

---

- あるいは、名前を使えば、位置を変えることができる：

```{r}
round(digits = 2, x = pi)
```

---

- おすすめは、**任意な引数の名前を使う**ことです：

```{r}
round(pi, digits = 2)
```

## チャレンジ

- `sort()`は入力を並び替える関数。
  - 引数は`x`（ベクトル）と`decreasing`（論理）

今まで扱ったデータを以下のように並び替えてください：

- 1. `ages`を小さいから大きい順に
- 2. `ages`を大きいから小さい順に
- 3. `menu`をAからZまでの順に
- 4. `menu`をZからAまでの順に

## パッケージとは

- Rパッケージとは、Rが出来ることを大幅に増やす「追加」のソフト（関数のまとまり）
  - 現在、**２万**近くのパッケージがある！

## パッケージのインストール

Rパッケージのインストールを行うには、`install.packages()`を使う：

```{r}
#| label: install
#| echo: true
#| eval: false
install.packages("ggplot2")
```

一回インストールしたら、次回からはしなくて良い\\*

## パッケージのロード

- パッケージをインストールしたら、使える状態にするにはロードすることが必要
  - インストールは一回でいい
  - ロードは毎回必要

`library()`関数でロードする：

```{r}
library(ggplot2)
```

## tidyverse

- `tidyverse`はデータサイエンス用パッケー**ジの集まり**のパッケージ
  - `ggplot2`（可視化）
  - `dplyr`（データの整理）
  - `stringr`（文字データを扱う）
  - など

これからよく使うので、インストールしましょう。

---

```{r}
#| label: install-tidyverse
#| echo: true
#| eval: false
install.packages("tidyverse")
```

（実は、`tidyverse`は教室のパソコンにすでに入っているのでインストールは不要だが、自分のパソコンを使っている時は必要です）

## `install.packages()`と`library()`の違い

- `install.packages()`は一回だけで良い（パソコンにパッケージをダウンロードする）

- `library()`はRを使う毎にしないといけない（パッケージを今回のRのセッションで使えるようにする）

## 情報処理演習室の注意点

> `install.packages()`は一回だけで良い

と言いましたが、この教室のパソコンからログアウトすると**パッケージを含む**あなたのデータ**が全部消去されてしまう**。

なので、この教室のパソコンに新しくインストールするパッケージは**毎回インストールが必要**。

## 今後の宿題について

- 宿題は今まで通りにオンラインで受けることは可能
  - 混み合っている時間には接続ができない可能性がある
  - しばらく使っていないとリセットされてしまう

- これからは、教室内のパソコンにインストールして、ここで受けることが可能になった：

```{r}
#| label: install-joholearnr
#| echo: true
#| eval: false
library(remotes)
install_github("joelnitta/joholearnr")
```

---

- インストールができたら、右上の「環境」パネルに新しい「Tutorial」タブができる(1)

- 受けたい宿題を探して（2）

- 「Start Tutorial」をクリックするとブラウザの中でチュートリアルが始まる（3）

---

![](../images/tutorial-rstudio-screenshot.png)
