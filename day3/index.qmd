---
format:
  revealjs:
    incremental: false
    css: ../styles.css
execute: 
  echo: true
---

# 第3回：プロジェクトの整理とデータの読み込み

<https://data-science-chiba-2024.github.io/day3/>

## 連絡事項

- 第２回の宿題の締め切りを10月25日（金曜日） 23:59まで延長しました

## クイズ

:::: {.columns}

::: {.column width="50%"}
![](../images/joho2024-qr-code.png)
:::

::: {.column width="50%"}
**注意：** 質問は複数選択です。**すべて**の正しい答えを選んでください。
:::

::::

または、[gosocrative.com](https://gosocrative.com) で joho2024を入力

## 今後の宿題について

- 宿題はこれまで通りオンラインで受けることも可能です。
  - 混雑している時間帯には接続できない可能性があります。
  - しばらく使用しないとリセットされてしまいます。

## 今後の宿題について

- オンラインで受けてきた宿題は**Rパッケージ**「 `joholearnr`」でもあります

- 教室内のパソコンに宿題がインストールされているので、**ここで**受けることも可能になりました：
  - 右上の「環境」パネルで「Tutorial」タブをクリック（1）
  - 受けたい宿題を探します（2）
  - 「Start Tutorial」をクリックするとブラウザ内でチュートリアルが始まります（3）

---

![](../images/tutorial-rstudio-screenshot.png)

---

- チュートリアルが終わったら（完成コードを提出したら）、「Stop」ボタンをクリックしてください。

![](../images/tutorial-stop.png)

- 注意：完成コードを提出する前に「Stop」ボタンをクリックすると、**今までの答えが消去される**ので気をつけてください。

---

- リストに今週の宿題が表示されていない場合は、パッケージのアップデート（再インストール）が必要です。
  - 以下のようにインストールを行ってください：

:::{.medsmall}
```{r}
#| label: install-joholearnr-2
#| echo: true
#| eval: false
install.packages(
  "joholearnr",
  repos = c("https://joelnitta.r-universe.dev", "https://cloud.r-project.org")
)
```
:::

- コードが長いので、コピーペーストがおすすめです。
  - 上のテキストの上にマウスを置くと、その右上に小さなクリップボードのアイコンが出ます。アイコンをクリックするとコードがコピーされます。

---

- もし以下のメッセージが表示されたら：

```
These packages have more recent versions available.
It is recommended to update all of them
Which would you like to update?
```

`3`を押してからエンターキーを押してください（他のパッケージをアップデートしない）。

- `install()`を実行したら、一旦RStudioを閉じてから再度開いてください。そうすると、新しいチュートリアル（宿題）が表示されます。

## アウトライン

- プロジェクトの整理とデータの読み込み
  - ファイルとフォルダー
  - データフレーム
  - スクリプト
  - プロジェクトの作成

## RStudioの設定の変更

- 再現性を担保するために、RStudioの設定を変更する必要があります。

- そうしないと、予想外の（自分が書いたコードに依存しない）結果が得られます。

- 「Tools」→「Global Options」→「Workspace」
  - 「Restore .RData into workspace at startup」→ **外す**
  - 「Save workspace to .RData on exit」→ **「Never」**

---

![](../images/settings_change.png)

## データフレームについて

- データフレームは最もよく使われるデータ形式です。
  - 行と列から構成される2次元データ（表形式データ）
  - エクセルのスプレッドシートと同じようなもの

---

![](../images/students-excel-view.png)

## データフレームについて

- エクセルとの大きな違い：各列は同じデータ型を持たなければなりません。
  - つまり、各**列がベクトルである**ということです。

- tidyverseでは、「tibble」と呼ばれます。

![](https://swcarpentry-ja.github.io/2021-04-02-todai-slides/images/dataframe-example.png)

## 初データの読み込み

- 練習として、教科書に掲載されている`students.csv`ファイルをRに読み込みます。

- まず、このリンクから`students.csv`を**デスクトップ**にダウンロードしてください：
  - <https://pos.it/r4ds-students-csv>

---

![](../images/firefox-save-csv.png)

## `.csv`ファイルについて

- `.csv`は、**C**omma-**s**eparated **v**aluesの略です。
  - データはコンマ（`,`）で区切られています。

- エクセルの`.xlsx`ファイルとの違い
  - `.csv`の中身は単純な文字列なので、直接中身を確認することができます。
  - `.xlsx`（または`.xls`）ファイルは**エクセルのみ**に対応しています。
  - `.xlsx`はエクセルを持っていない方にとって使いにくいので、**`.csv`を推奨**します。

---

![](../images/firefox-csv.png){height=300px}

![](../images/students-excel-view.png){height=300px}

## `.csv`ファイルをRに読み込む

- これから使用する関数は`tidyverse`パッケージに含まれているので、まずは`tidyverse`をロードしましょう。

---

```{r}
library(tidyverse)
```

---

- `.csv`ファイルを読み込む関数は`read_csv()`です。

---

::: {.medsmall}

```{r}
#| eval: false
students <- read_csv("Z:/Desktop/students.csv")
students
```

```{r}
#| echo: false
students <- read_csv("../data/students.csv")
students
```

:::

---

## フォルダ構造について

- `Z:/Desktop/students.csv`は`students.csv`のパス、つまりそのファイルがどこにあるのかを示す情報です。
  - パスはコンピューター内の**住所のようなもの**です。

---

- コンピューターのデータはすべて**ファイル**と**フォルダー**で整理されています。
  - ファイル：データ
  - フォルダー：ファイルの入れ物
  - パスの`/`は日本語の「の」と同じような意味です。 

---

![](../images/file_hierarchy_1.png)

---

![](../images/file_hierarchy_2.png)

## `.csv`ファイルをRに読み込む

- これでRに`.csv`ファイルのデータを読み込むことができました。

- しかし、データの読み込みからデータの解析の最後まで、すべての作業を一度で終わらせることは現実的ではありません。

- ここで一旦作業を停止して、RStudioを閉じましょう。

## 作業の再開

- 再度RStudioを開きましょう。

- 今までの成果はどうなっているのでしょうか？
  - またすべて一からやり直す必要があります。

- もっと良いやり方があるはずです…。

## スクリプト

- これまではRのコマンドを直接コンソールに入力していました。
  - 同じ作業を再度行うときは効率が悪いです。

- スクリプト（テキストファイル）にコマンドを保存すると、後々楽になります。

- 「File」 → 「New File」 → 「RScript」

---

![](../images/rstudio-new-script.png)

## スクリプトの編集

- スクリプトにこれまで書いたコードを入れましょう：
  - コメントを入れることで、自分にこのコードが何をしているのかをメモしておきましょう。

```{r}
#| eval: false
library(tidyverse)

# Load data
students <- read_csv("Z:/Desktop/students.csv")
```

## スクリプトの保存

- スクリプトを保存しましょう。

- 「File」 → 「Save As」 → 場所とファイル名を決めて保存します。

- 今回は`students.R`としましょう。
  - Rスクリプトは`.r`もしくは`.R`のファイル拡張子を使用します。

---

![](../images/rstudio-save-script.png)

## スクリプトとコンソールの違い

- スクリプトに記述されているRコードは「これから実行するコマンドのリスト」のようなものです（レシピをイメージしてください）。

- Rにそのコマンドを実行するように指示する必要があります。

## スクリプトからのコマンドの実行

- まずはカーソルを実行したい行に置きます（矢印キーかマウスを使ってください）。

- 「Run」アイコンをクリックします。

---

![](../images/rstudio-run.png)

---

- または、ショートカットを使います（**おすすめ**）。
  - Mac: `⌘`と`Enter`を同時に押す
  - Windows: `Ctrl`と`Enter`を同時に押す

## チャレンジ ①

RStudioを閉じてから、再度スクリプトを開いてコマンドを実行してください。

. . .

一々コマンドを入力するよりは便利でしょう？

## プロジェクトについて

- スクリプトを書くことでデータ解析の作業をかなり楽にしましたが、次には**ファイルを整理する**必要があります。

- ファイルの整理には、RStudioの**プロジェクト**機能を使用します。

## プロジェクトについて

- RStudioのプロジェクトとは、**データ解析に使用するフォルダー**のことです。

- このフォルダー内に、特定の**データ解析プロジェクトに必要なファイル**を配置します。

## プロジェクトの作り方

- 「File」 → 「New Project...」 → 「New Directory」 → 「New Project」

- 今回のプロジェクトは`students_analysis`と名付け、デスクトップに配置しましょう。
  - この教室のコンピューターはデスクトップ以外の場所にプロジェクトを置くと、ログアウト時に消去されます。

---

![](../images/rstudio-new-project-1.png){height=500px}

---

![](../images/rstudio-new-project-2.png)

---

![](../images/rstudio-new-project-3.png)

---

![](../images/rstudio-new-project-4.png){height=500px}

## プロジェクトの作り方

- `students_analysis`プロジェクトを作成したら、その中に`data`というフォルダーを作成し、`students.csv`を`data`に移動してください。
  - 「Files」パネルで**フォルダーアイコン**をクリックします。

---

![](../images/new_folder.png)

---

- 右下のファイルパネルに`data`が含まれていることを確認できます。

---

![](../images/rstudio-project-data-folder.png)

## プロジェクトの開き方

- RStudioを一旦閉じましょう。

- 今度は、アプリ一覧からではなく、**プロジェクトから**RStudioを開きましょう。

- `students_project`フォルダーを開き、その中の`students_project.Rproj`ファイルをダブルクリックしてください。

---

![](../images/students_rproject.png)

---

- すると、RStudioはそのプロジェクトに入った状態で起動します。
  - ファイルパネル（右下）にこれまでの`data`や`students.R`が表示されていることを確認してください。

---

![](../images/rstudio-students-project.png)

## パスについて

- プロジェクトを開いた後、スクリプトを使ってもう一度`students.csv`を読み込みましょう：

```{r}
#| error: true
library(tidyverse)

# Load data
students <- read_csv("Z:/Desktop/students.csv")
```

. . .

今度はうまくいかない。なぜでしょう？

---

- 先ほど、`students.csv`を`students_project`に移動しました。つまり、もう`Desktop`には置いていないため、`Desktop`内を探しても見つかりません。

---

![](../images/student_path_changed.png)

## チャレンジ ②

- このコードをどのように変更すれば`students.csv`を読み込むことができるでしょうか？

```{r}
#| eval: false
# Load data
students <- read_csv("Z:/Desktop/students.csv")
```

## 絶対パス

- 一つの解決方法は**絶対パス**を指定することです：
  - コンピューターの最上位ディレクトリ（教室のパソコンでは`Z:`）から始まります。
    - Macの場合は`/`から始まります。

```{r}
#| eval: false
# Load data
students <- read_csv("Z:/Desktop/students_project/data/students.csv")
```

- しかし、もしこのプロジェクトを再度移動した場合、同じような問題が発生します。

## 相対パス

- もう一つの方法は「相対パス」と呼ばれるものです。

- つまり、Rの**作業ディレクトリ**（Rが現在入っているフォルダー）**から見たパス**です。

- `getwd()`でRの作業ディレクトリを確認できます：
  - "Get working directory"
```{r}
#| eval: false
getwd()
```

---

- 現在、Rは`Desktop/students_analysis/`に入っていることがわかりました。

- したがって、以下のようにデータを読み込むことができます：

```{r}
#| eval: false
# Load data
students <- read_csv("data/students.csv")
```

---

- RStudioのプロジェクト機能を使うと、**.Rprojファイルが含まれるフォルダーが作業ディレクトリ**になります。

- ファイルの場所がすぐにわかり、プロジェクトを別の場所に移動してもコードを変更する必要がありません。

- 相対パスをおすすめします！

---

![](../images/working_dir_paths.png)

## チャレンジ ③

- `penguins_analysis`というプロジェクトをデスクトップに作成して開いてください。終わったら、再度`students_analysis`を開いてください。
  - （`penguins`は別の教科書のデータセットです）

## データフレームのデータ型

- 今回読み込んだデータをよく見てみましょう。
  - `AGE`という列のデータ型は？

## データフレームのデータ型

- `AGE`は数値（`dbl`）ではなく、文字（`chr`）として読み込まれています。
  - なぜでしょう？

## データフレームのデータ型

- `AGE`の中に`"five"`が含まれていたため、すべてが文字として認識されてしまったようです。
  - 自動的なデータ型の検出がうまく機能しませんでした。

- このような場合は、自分でデータ型を指定する必要があります。

## データフレームのデータ型の指定

- `read_csv()`の`col_types`引数を使用します。

```{r}
#| eval: false
col_types = list(列名 = col_何ちゃら())
```

```{r}
#| eval: false
col_types = list(AGE = col_double())
```

---

::: {.medsmall}

```{r}
#| eval: false
students <- read_csv("Z:/Desktop/students.csv", col_types = list(AGE = col_double()))
students
```

```{r}
#| echo: false
students <- read_csv("../data/students.csv", col_types = list(AGE = col_double()))
students
```

:::

## 他のデータ型

- `col_character()` 文字
- `col_logical()` 論理
- `col_double()` 数字
