---
format:
  revealjs:
    incremental: false
    css: ../styles.css
execute: 
  echo: true
---

# 第3回：プロジェクトの整理とデータの読み込み

<https://data-science-chiba-2024.github.io/day3/>

## クイズ

:::: {.columns}

::: {.column width="50%"}
![](../images/joho2024-qr-code.png)
:::

::: {.column width="50%"}
**注意：**質問は複数選択です。**すべて**の正しい答えを選択してください。
:::

::::

あるいは、[gosocrative.com](https://gosocrative.com) で joho2024を入力

## 今後の宿題について

- 宿題は今まで通りオンラインで受けることも可能です
  - 混雑している時間帯には接続できない可能性があります
  - しばらく使用しないとリセットされてしまいます

## 今後の宿題について

- オンラインで受けてきた宿題は**Rパッケージ**「 `joholearnr`」でもあります

- 教室内のパソコンに宿題がインストールされまたので、**ここで**受けることも可能になりました：
  - 右上の「環境」パネルに新しい「Tutorial」タブをクリック(1)
  - 受けたい宿題を探します（2）
  - 「Start Tutorial」をクリックするとブラウザ内でチュートリアルが始まります（3）

---

![](../images/tutorial-rstudio-screenshot.png)

---

- 終わったら、「Stop」ボタンをクリックしてください

![](../images/tutorial-stop.png)
---

- リストに今週の宿題が入っていない場合は、パッケージのアップデート（再インストール）が必要です。
  - このようにインストールを行なってください：

```{r}
#| label: install-joholearnr-2
#| echo: true
#| eval: false
library(remotes)
install_github("joelnitta/joholearnr")
```

- `install_github()`は、カスタムなRパッケージをインストールする関数です

---

- もし以下のメッセージが出たら：

```
These packages have more recent versions available.
It is recommended to update all of them
Which would you like to update?
```

`3`を押してからエンターキーを押してください（他のパッケージをアップデートしない）。

- `install_github()`をしてもチュートリアルが出ない場合は、一旦RStudioを閉じてからもう一度開いてください。そうすると、新しいチュートリアル（宿題）が出ているはずです。

## アウトライン

- プロジェクトの整理とデータの読み込み
  - ファイルとフォルダー
  - データフレーム
  - スクリプト
  - プロジェクトの作成

## RStudioの設定の変更

- 再現性を担保するために、RStudio の設定の変更を変える必要があります。

- こうしないと、予想外の（自分が書いたコードに依らない）結果があります

- 「Tools」→「Global Options」→「Workspace」
  - 「Restore .RData into workspace at startup」→ **外す**
  - 「Save workspace to .RData on exit」→ **「Never」**

---

![](../images/settings_change.png)

## データフレームについて

- データフレームは最もよく使うデータ形式です
  - 行と列から出来ている２次元データ（表形式データ）
  - エクセルのSpreadsheetと同じような物

---

![](../images/students-excel-view.png)

## データフレームについて

- エクセルとの大きな違い：各列は同じデータ型を持たなければならない
  - つまり、かく**列がベクトルである**

- tidyverseでは、「tibble」と呼ばれる

![](https://swcarpentry-ja.github.io/2021-04-02-todai-slides/images/dataframe-example.png)

## 初データの読み込み

- 練習として、教科書に出ている`students.csv`ファイルをRに読み込みます

- まず、このリンクから`students.csv`を**デスクトップ**にダウンロードしてください:
  - <https://pos.it/r4ds-students-csv>

---

![](../images/firefox-save-csv.png)

## `.csv`ファイルについて

- `.csv`は、**C**omma-**s**eparated **v**aluesの略
  - データはコンマ（`,`）で区切られている

- エクセルの`.xslx`ファイルとの違い
  - `.csv`の中身は単純文字列なので、直接中身を確認することができます。
  - `.xslx`（または`.xsl`）ファイルは**エクセルのみ**に対応している
  - `.xslx`はエクセルを持っていない方にとって使いずらいので、**`.csv`を推薦**

---

![](../images/firefox-csv.png){height=300px}

![](../images/students-excel-view.png){height=300px}

## `.csv`ファイルをRに読み込む

- これから使う関数は`tidyverse`パッケージに入っているので、まずは`tidyverse`をロードしましょう

---

```{r}
library(tidyverse)
```

---

- `.csv`ファイルを読み込む関数は`read_csv()`です

---

::: {.medsmall}

```{r}
#| eval: false
students <- read_csv("Z:/Desktop/students.csv")
students
```

```{r}
#| echo: false
students <- read_csv("../data/students.csv")
students
```

:::

---

## フォルダ構造について

- `Z:/Desktop/students.csv`は`students.csv`のパスです、つまり、そのファイルがどこにあるのか、と言う情報です。
  - パスはコンピューターの中の**住所みたいなもの**です

---

- コンピューターのデータは全て**ファイル**と**フォルダー**で整理されています。
  - ファイル: データ
  - フォルダー: ファイルの入れ物
  - パスの`/`は日本語の「の」と同じような意味。 

---

![](../images/file_hierarchy_1.png)

---

![](../images/file_hierarchy_2.png)

## `.csv`ファイルをRに読み込む

- これでRに`.csv`ファイルのデータを読み込むことができました。

- しかし、データの読み込みからデータの解析の最後まで、全部の作業を一回で終わることは現実的ではありません。

- ここで一旦作業を停止して、RStudioを閉じましょう

## 作業の再開

- またRStudioを開きましょう

- 今までの成果はどうなっているのでしょうか？
  - また全部一からやり直す必要がある

- もっといいやり方があるはず・・

## スクリプト

- 今まではRのコマンドを直接コンソールに打ちました
  - 同じ作業を再度行う時は効率が悪い

- スクリプト（テキストファイル）にコマンドを保存すると、後々楽になります

- 「File」 → 「New File」 → 「RScript」

---

![](../images/rstudio-new-script.png)

## スクリプトの編集

- スクリプトに今まで書いたコードを入れましょう：
  - コメントを入れることによって、自分にこのコードが何をしているのか、メモっておきましょう

```{r}
#| eval: false
library(tidyverse)

# Load data
students <- read_csv("Z:/Desktop/students.csv")
```

## スクリプトの保存

- スクリプトを保存しましょう：

- 「File」 → 「Save As」 → 場所とファイル名を決めて、保存する

- 今回は`students.R`としましょう
  - Rスクリプトは`.r`もしくは`.R`のファイル拡張を使います

---

![](../images/rstudio-save-script.png)

## スクリプトとコンソールの違い

- スクリプトに入っているRコードは「これから実行するコマンドのリスト」みたいな物です（レシピをイメージしてください）

- Rにそのコマンドを実行するように指示する必要があります

## スクリプトからのコマンドの実行

- まずはカーソルを実行したい行におきます（矢印キーかマウスを使えば良い）

- 「Run」アイコンをクリックします

---

![](../images/rstudio-run.png)

---

- あるいは、ショートカットを使います（**おすすめ**）
  - Mac: `⌘`と`enter`を同時に押す
  - Windows: `ctrl`と`enter`を同時に押す

## チャレンジ ①

RStudioを閉じてから、またスクリプトを開いて、コマンドを実行してください

. . .

一々コマンドを打つよりは便利でしょう？

## プロジェクトについて

- スクリプトを書くことによって、データ解析の作業をだいぶ楽にしましたが、次には**ファイルを整理する**必要があります

- ファイルの整理には、RStudio の**プロジェクト**機能を使います

## プロジェクトについて

- RStudio のプロジェクトというのは、**データ解析に使うフォルダー**のことです

- このフォルダーの中に、ある**データ解析プロジェクトに必要なファイル**を入れます

## プロジェクトの作り方

- 「File」 → 「New Project...」 → 「New Directory」→「New Project」

- 今回のプロジェクトは`students_analysis`と呼んで、デスクトップに置きましょう
  - この教室のコンピューターはデスクトップ以外の場所に置くと、ログアウトする際に消されます

---

![](../images/rstudio-new-project-1.png){height=500px}

---

![](../images/rstudio-new-project-2.png)

---

![](../images/rstudio-new-project-3.png)

---

![](../images/rstudio-new-project-4.png){height=500px}

## プロジェクトの作り方

- `students_analysis`プロジェクトを作ったら、その中に`data`と言うフォルダーを作って、`students.csv`を`data`に移動してください
  - 「File」パネルで**フォルダーアイコン**をクリック

---

![](../images/new_folder.png)

---

- 右下のファイルパネルに、`data`が入っていることが確認できます

---

![](../images/rstudio-project-data-folder.png)

## プロジェクトの開き方

- RStudioを一旦閉じましょう

- 今度は、アプリ一覧からではなく、**プロジェクトから**RStudioを開きましょう

- `students_project`フォルダーを開いてから、中の`students_project.Rproj`ファイルをダブルクリックしてください

---

![](../images/students_rproject.png)

---

- ・・すると、RStudioはそのプロジェクトに入った状態で出てきます
  - ファイルパネル（右下）に今までの`data`や`students.R`が出ていることを確認してください

---

![](../images/rstudio-students-project.png)

## パスについて

- プロジェクトを開いてから、スクリプトを使ってもう一度`students.csv`を読み込みましょう：

```{r}
#| error: true
library(tidyverse)

# Load data
students <- read_csv("Z:/Desktop/students.csv")
```

. . .

今度はうまく行かなかい。なぜでしょう？

---

- さっき、`students.csv`を`students_project`に移動しました。つまり、もう`Desktop`においていないので、`Desktop`の中を探しても出て来ません。

---

![](../images/student_path_changed.png)

## チャレンジ ②

- このコードをどうやって変えれば`students.csv`を読むことができるのでしょうか？

```{r}
#| eval: false
# Load data
students <- read_csv("Z:/Desktop/students.csv")
```

## 絶対パス

- 一つの解決方法は**絶対パス**を指定することです：
  - パソコンの最も基部になっているディレクトリ（教室のパソコンでは`Z:`）から始まる
    - Macの場合は`/`から始まる

```{r}
#| eval: false
# Load data
students <- read_csv("Z:/Desktop/students_project/data/students.csv")
```

- でも、もしこのプロジェクトをまた移動したら、また同じような問題が起こりますね。

## 相対パス

- もう一つの方法は、「相対パス」と呼びます

- つまり、R の**作業ディレクトリ**（R が今入っているフォルダー）**から見たパス**です。

- `getwd()`でR の作業ディレクトリを確認することができます：
  - "Get working directory"
```{r}
#| eval: false
getwd()
```

---

- 今、Rは`Desktop/students_analysis/`に入っていることが分かりました。

- なので、このようにデータを読み込むことができます：

```{r}
#| eval: false
# Load data
students <- read_csv("data/students.csv")
```

---

- RStudioのProject機能を使うと、必ず**.Rprojファイルが入っているフォルダーが作業ディレクトリになります**。

- ファイルの場所がすぐに分かり、プロジェクトを別の場所に移動しても、コードを変える必要がありません。

- 相対パスがおすすめです！

---

![](../images/working_dir_paths.png)

## チャレンジ ③

- `penguins_analysis`と言うプロジェクトをDesktopに作って、開いてください。終わったらまた`students_analysis`を開いてください。
  - （`penguins`は別の教科書のデータセットです） 

## データフレームのデータ型

- 今回読み込んだデータをよく見てみましょう
  - `AGE`という列のデータ型は？

## データフレームのデータ型

- `AGE`は数字（`dbl`）ではなく、文字（`chr`）として読み込まれた
  - なぜでしょう？

## データフレームのデータ型

- `AGE`の中に、`"five"`が入っていたため、全部が文字として認識されてしまったようです。
  - 自動的なデータ型の感知がうまく行きませんでした

- このような場合は、自分でデータ型を指定する必要があります

## データフレームのデータ型の指定

- `read_csv()`の`col_types`引数を使う

```{r}
#| eval: false
col_types = list(列名 = col_何ちゃら())
```

```{r}
#| eval: false
col_types = list(AGE = col_double())
```

---

::: {.medsmall}

```{r}
#| eval: false
students <- read_csv("Z:/Desktop/students.csv", col_types = list(AGE = col_double()))
students
```

```{r}
#| echo: false
students <- read_csv("../data/students.csv", col_types = list(AGE = col_double()))
students
```

:::