---
format:
  revealjs:
    incremental: false
    css: ../styles.css
execute: 
  echo: true
---

# 第7回：データの可視化（2）

<https://joelnita.github.io/joho-shori/day7/>

## 連絡事項

- オンデマンド回の課題と倫理教育e-learningの締め切りは **11月21日（木）** です。
  - **早めの提出を心がけてください。**

## クイズ

:::: {.columns}

::: {.column width="50%"}
![](../images/joho2024-qr-code.png)
:::

::: {.column width="50%"}
**注意：** 質問は複数選択です。**すべて**の正しい答えを選んでください。

クイズ中は質問に回答してください。他の行為（スライドの閲覧やRStudioの操作など）は**禁止**です。
:::

::::

## 今日のアウトライン

- 前回のおさらい
- データの可視化（2）
  - グラフにモデルを加える
  - グラフのラベルを整える
  - グラフの色を整える

## 前回のおさらい

```{r}
#| echo: false
library(tidyverse)
library(palmerpenguins)
library(ggrepel)
library(showtext)
library(ggthemes)
```

- ggplot2の`gg`は「**g**rammar of **g**raphics」（「図の文法」）を意味します。
- 図の文法：
  - グラフ中の要素とデータの紐付け（aesthetics）
  - 形状（geometry）

## 準備

- 前回欠席した方は、Moodleから第7回の`penguins_analysis.zip`をダウンロードして、デスクトップで解凍してください。
  - やり方の詳細については[第5回のスライド](https://joelnitta.github.io/joho-shori/day5/#/%E6%BA%96%E5%82%99)を参照してください

---

- `penguins_analysis`プロジェクトを開き、その中の`penguins.R`を開きます。

- パッケージとデータをロードします：

---

::: {.medsmall}

```{r}
#| filename: penguins.R
#| attr-output: "style='font-size: 0.4em'"
library(tidyverse)
library(palmerpenguins)

penguins
```

:::

---

![](https://allisonhorst.github.io/palmerpenguins/reference/figures/lter_penguins.png)

## 目的：このグラフを作る

![](https://r4ds.hadley.nz/data-visualize_files/figure-html/unnamed-chunk-7-1.png)

## 前回の最後に書いたグラフ

::: {.medsmall}
```{r}
#| output-location: column
ggplot(
  data = penguins,
  mapping = aes(
    x = flipper_length_mm,
    y = body_mass_g,
    color = species
  )
) +
  geom_point()
```
:::

## 前回の最後に書いたグラフ

::: {.medsmall}
```{r}
#| output-location: column
#| code-line-numbers: "3-8"
ggplot(
  data = penguins,
  # グラフ中の要素とデータの紐付け
  mapping = aes(
    x = flipper_length_mm,
    y = body_mass_g,
    color = species
  )
) +
  geom_point()
```
:::

## 前回の最後に書いたグラフ

::: {.medsmall}
```{r}
#| output-location: column
#| code-line-numbers: "9-10"
ggplot(
  data = penguins,
  mapping = aes(
    x = flipper_length_mm,
    y = body_mass_g,
    color = species
  )
) +
  # グラフの形状
  geom_point()
```
:::



## モデルとは、データを予測する数式

- 次に、**データの関係を表すモデル**を加えます。
- **線形モデル**（linear model）は、二つの変数の関係を一直線で表すモデルです。
- $y=ax+b$ という数式で表されます。

---

```{r}
#| echo: false
#| fig-asp: 1

# Add a Japanese font
font_add_google("Noto Sans JP", "noto")
showtext_auto()

# Create sample data
set.seed(123)
x <- seq(1, 10, by = 0.5)
a <- 2  # slope
b <- 3  # intercept
y <- a * x + b + rnorm(length(x), sd = 2)  # Add some noise to the data
data <- data.frame(x = x, y = y)

# Label data for ggrepel
label_data <- data.frame(
  x = c(0, 3),  # X position for y-intercept and slope
  y = c(b, a * 3 + b),  # Y position for y-intercept and slope
  label = c("y切片 (b = 3)", "傾き (a = 2)")  # Labels
)

# Generate the plot
ggplot(data, aes(x = x, y = y)) +
  geom_point(color = "blue", size = 2) +  # Scatter plot of points
  geom_hline(yintercept = 0, linetype = "dashed", color = "grey20") +
  geom_vline(xintercept = 0, linetype = "dashed", color = "grey20") +
  labs(
    title = "y = ax + b のグラフ",
    x = "X軸",
    y = "Y軸"
  ) +
  scale_y_continuous(limits = c(0, NA)) +
  theme_gray(base_size = 24, base_family = "noto")
```

---

```{r}
#| echo: false
#| fig-asp: 1

# Generate the plot
ggplot(data, aes(x = x, y = y)) +
  geom_point(color = "blue", size = 2) +  # Scatter plot of points
  geom_abline(slope = a, intercept = b, color = "red") +  # Line for y = ax + b
  geom_hline(yintercept = 0, linetype = "dashed", color = "grey20") +
  geom_vline(xintercept = 0, linetype = "dashed", color = "grey20") +
  # Intercept annotation
  annotate("point", x = 0, y = b, color = "purple", size = 4) + 
  geom_label_repel(
    data = label_data[1,],
    aes(x = x, y = y, label = label),
    color = c("purple"),
    size = 10,
    fontface = "bold",
    label.padding = 0.5,
    ylim = 2.5, xlim = 1
  ) +
  # Slope annotation
  annotate("segment", x = 2.5, xend = 3.5, y = a * 2.5 + b, yend = a * 3.5 + b, 
           arrow = arrow(length = unit(0.2, "cm")), color = "darkgreen", size = 1.5) +
  geom_label_repel(
    data = label_data[2,],
    aes(x = x, y = y, label = label),
    color = c("dark green"),
    size = 10,
    fontface = "bold",
    label.padding = 0.5,
    ylim = 10, xlim = 5
  ) +
  annotate("text", x = 6, y = max(y) - 2, label = "y = 2x + 3", 
           color = "red", size = 10, hjust = 0) +  # Annotate equation
  labs(
    title = "y = ax + b のグラフ",
    x = "X軸",
    y = "Y軸"
  ) +
  scale_y_continuous(limits = c(0, NA)) +
  theme_gray(base_size = 24, base_family = "noto")
```

```{r}
#| echo: false
showtext_auto(enable = FALSE)
```

---

### geom_smooth()で線形モデルを加える

::: {.medsmall}
```{r}
#| output-location: column
#| code-line-numbers: "|9"
ggplot(
  data = penguins,
  mapping = aes(
    x = flipper_length_mm,
    y = body_mass_g,
    color = species
  )
) +
  geom_smooth(method = "lm")
```

:::

---

:::: {.columns}

::: {.column width="50%"}
- **ただし、現在のモデルは種ごとになっています**（それぞれに異なる傾きと切片があります）。

- 今回の目的は、一つのモデルで全ての種をまとめることです。
:::

::: {.column width="50%"}
![](https://r4ds.hadley.nz/data-visualize_files/figure-html/unnamed-chunk-7-1.png)
:::

::::

---

### `color`を外すと、全ての種が同じモデルに含まれます

::: {.medsmall}
```{r}
#| output-location: column
ggplot(
  data = penguins,
  mapping = aes(
    x = flipper_length_mm,
    y = body_mass_g
  )
) +
  geom_smooth(method = "lm")
```

:::

---

### `geom_point()`で元のデータを点で表現する

::: {.medsmall}
```{r}
#| output-location: column
ggplot(
  data = penguins,
  mapping = aes(
    x = flipper_length_mm,
    y = body_mass_g
  )
) +
  geom_smooth(method = "lm") +
  geom_point()
```

:::

---

[そうか、色をまた戻さないと・・]{.large}

---

::: {.medsmall}
```{r}
#| output-location: column
#| code-line-numbers: "|6"
ggplot(
  data = penguins,
  mapping = aes(
    x = flipper_length_mm,
    y = body_mass_g,
    color = species
  )
) +
  geom_smooth(method = "lm") +
  geom_point()
```

:::

---

[しまった、また種別ごとの線になった。どうすればよいか？]{.large}

---

### `geom_()`の中に`mapping`を指定する

::: {.medsmall}
```{r}
#| output-location: column
ggplot(data = penguins) +
  geom_point(
    mapping = aes(
      x = flipper_length_mm,
      y = body_mass_g,
      color = species
    )
  )
```
:::

---

[`aes()`を`geom_()`の中に入れることで、それぞれの`geom_`に**異なるデータの表示方法**を指定できます！]{.medlarge}

---

### `geom_()`の中に`mapping`を指定する

::: {.medsmall}
```{r}
#| output-location: column
ggplot(data = penguins) +
  geom_point(
    mapping = aes(
      x = flipper_length_mm,
      y = body_mass_g,
      color = species
    )
  ) +
  geom_smooth(
    mapping = aes(
      x = flipper_length_mm,
      y = body_mass_g
    ),
    method = "lm"
  )
```
:::

---

[でも、毎回書くのは手間がかかりますね・・]{.medlarge}

---

- `ggplot()`の中に`aes()`を指定すると、それが**全て**の`geom_()`に適用されます

- 共通するデータの表示方法だけを`ggplot()`に記述すればOK！

---

共通の表示方法を`ggplot()`に、その他はそれぞれの`geom_()`に記述します：

::: {.medsmall}
```{r}
#| output-location: column
#| code-line-numbers: "|3-6|7"
ggplot(
  data = penguins,
  mapping = aes(
    x = flipper_length_mm,
    y = body_mass_g)
  ) +
  geom_point(aes(color = species)) +
  geom_smooth(method = "lm")
```
:::

## チャレンジ ①

種を点の形で表現してください。

## レイヤーについて

- `+`で追加するコードを**「レイヤー」**（layer）と呼びます
- レイヤーには**順序があります**：下から上へと重ねていきます

---

![](https://r.qcbs.ca/workshop03/book-en/images/gglayers.png)

## チャレンジ ②

`geom_point()`のレイヤーと`geom_smooth()`のレイヤーの順番を入れ替えてみてください。

グラフがどのように変化しましたか？

## `labs`レイヤーでグラフのラベルを整える

- 発表時には、図を誰にでも分かりやすくする必要があります
- あなた（図を作った人）は`flipper_length_mm`が何を指しているか分かるでしょうが、見る人には分かりにくいことがあります

## `labs`レイヤーでグラフのラベルを整える

- 名前の作り方は使う人によって異なります：
  - `flipper_length_mm`：コードを書く人
  - `Flipper length (mm)`：図を見る人
- **解決策**：元のデータの変数名（列名）は変更せずに、**分かりやすいラベルをグラフの作成時に指定します**

---

### `labs`レイヤーでラベルを指定する

::: {.medsmall}

```{r}
#| output-location: column
#| code-line-numbers: "|9-11"
ggplot(
  data = penguins,
  mapping = aes(
    x = flipper_length_mm,
    y = body_mass_g)
  ) +
  geom_point(aes(color = species, shape = species)) +
  geom_smooth(method = "lm") +
  labs(
    x = "Flipper length (mm)"
  )
```

:::

## チャレンジ ③

縦軸のラベルを読みやすくしてください。

---

### ラベルを整えたグラフ

::: {.medsmall}

```{r}
#| output-location: column
ggplot(
  data = penguins,
  mapping = aes(
    x = flipper_length_mm,
    y = body_mass_g)
  ) +
  geom_point(aes(color = species, shape = species)) +
  geom_smooth(method = "lm") +
  labs(
    title = "Body mass and flipper length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Flipper length (mm)", y = "Body mass (g)",
    color = "Species", shape = "Species"
  )
```

:::

## 色を整える

- ラベルだけでなく、**色**も誰にでも分かりやすくする必要があります
- 世界人口の約**4〜5％**が**色覚異常**を持つ（男性8％、女性0.5％）
- ggplot2のデフォルトの色は色覚異常の方にとって識別が難しい場合があります
- **色覚異常に配慮したカラーパレットを使用することが重要です**

## `ggthemes`の色を使う

- `ggthemes`パッケージには色覚異常に配慮した色が含まれています
- `tidyverse`には含まれていないので、インストールが必要です

```{r}
#| eval: false
install.packages("ggthemes")

library(ggthemes)
```

---

### `ggthemes`の色を使う

::: {.medsmall}

```{r}
#| output-location: column
#| code-line-numbers: "|15"
ggplot(
  data = penguins,
  mapping = aes(
    x = flipper_length_mm,
    y = body_mass_g)
  ) +
  geom_point(aes(color = species, shape = species)) +
  geom_smooth(method = "lm") +
  labs(
    title = "Body mass and flipper length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Flipper length (mm)", y = "Body mass (g)",
    color = "Species", shape = "Species"
  ) +
  scale_color_colorblind()
```

:::

# 完成！

## グラフの保存方法

- `ggsave()`でグラフをファイルに書き出す

```{r}
#| eval: false
ggsave("penguins.pdf")
```

## グラフの保存方法

- ファイルの拡張子を変えると、出力ファイルが自動的にそのファイル形式になる

```{r}
#| eval: false
ggsave("penguins.jpg")
```

## 文字化けを防ぐ方法

- ggplot2のデフォルトフォントでは日本語が文字化けする可能性があります

---

::: {.medsmall}

```{r}
#| output-location: column
#| code-line-numbers: "|10-12"
ggplot(
  data = penguins,
  mapping = aes(
    x = flipper_length_mm,
    y = body_mass_g,
    shape = species)
  ) +
  geom_point(aes(color = species)) +
  geom_smooth(method = "lm") +
  labs(
    title = "ペンギンの体重および翼の長さ"
  ) +
  scale_color_colorblind()
```

:::

## `showtext`で日本語フォントを利用する

- `showtext`パッケージを使用するとカスタムフォントが利用可能になります
- `tidyverse`には含まれていないので、インストールが必要です

```{r}
#| eval: false
install.packages("showtext")

library(showtext)
```

## `showtext`で日本語フォントを利用する

- `ggplot()`の前にフォント設定を行います：

```{r}
#| eval: false

# Add a Japanese font
font_add_google("Noto Sans JP", "noto")
showtext_auto()
```

---

### `theme_()`でフォントを指定する

::: {.medsmall}

```{r}
#| output-location: column
#| code-line-numbers: "|1-2|17"
font_add_google("Noto Sans JP", "noto")
showtext_auto()

ggplot(
  data = penguins,
  mapping = aes(
    x = flipper_length_mm,
    y = body_mass_g,
    shape = species)
  ) +
  geom_point(aes(color = species)) +
  geom_smooth(method = "lm") +
  labs(
    title = "ペンギンの体重および翼の長さ"
  ) +
  scale_color_colorblind() +
  theme_grey(base_family = "noto")
```

:::

---

### `theme_()`でグラフ全体のデザインを整える

::: {.medsmall}

```{r}
#| output-location: column
#| code-line-numbers: "|17"
ggplot(
  data = penguins,
  mapping = aes(
    x = flipper_length_mm,
    y = body_mass_g,
    shape = species)
  ) +
  geom_point(aes(color = species)) +
  geom_smooth(method = "lm") +
  labs(
    title = "Body mass and flipper length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Flipper length (mm)", y = "Body mass (g)",
    color = "Species", shape = "Species"
  ) +
  scale_color_colorblind() +
  theme_minimal()
```

:::

## 他の`theme_()` {.smaller}

ggplot2には以下の`theme_()`が用意されています：

- `theme_grey()` （デフォルト）
- `theme_bw()`
- `theme_linedraw()`
- `theme_light()`
- `theme_dark()`
- `theme_minimal()`
- `theme_classic()`
- `theme_void()`

## チャレンジ ④

他のテーマを試してみてください。どのテーマが好きですか？

---

### `ggthemes`パッケージにはさらに多くのテーマがあります

<iframe src="https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/" 
        width="800" 
        height="600">
</iframe>

## まとめ

- `geom_smooth()`でモデルを追加できる
- `+`でレイヤーを増やす
- `labs`でラベルを整える
- `scale_color_()`でデータの色を整える
- `theme_()`でグラフ全体のデザインを整える
